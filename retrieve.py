import boto3
import json
region_name="us-west-2" #TODO CHANGE
kb_id="GIH0AEZT1V" #TODO CHANGE
# try out KB using RetrieveAndGenerate API
bedrock_agent_runtime_client = boto3.client("bedrock-agent-runtime", region_name=region_name)
# Lets see how different Anthropic Claude 3 models responds to the input text we provide
claude_model_ids = [ ["Claude 3 Haiku", "us.anthropic.claude-3-5-sonnet-20241022-v2:0"]]

def retrieve_from_knowledge_base(query, knowledge_base_id):
    """
    Retrieve relevant information from a Bedrock knowledge base using the Retrieve API
    
    Args:
        query (str): The search query
        knowledge_base_id (str): The ID of the knowledge base to search
        
    Returns:
        list: List of retrieved passages and their metadata
    """
    # Initialize the Bedrock Agent Runtime client
    bedrock_agent_runtime = boto3.client('bedrock-agent-runtime', region_name=region_name)
    
    try:
        # Make the retrieve API call
        response = bedrock_agent_runtime.retrieve(
            knowledgeBaseId=knowledge_base_id,
            retrievalQuery={
                'text': query
            },
            retrievalConfiguration={
                'vectorSearchConfiguration': {
                    'numberOfResults': 5,  # Adjust based on your needs
                 #   'searchType': 'HYBRID'  # Can be 'SEMANTIC' or 'HYBRID'
                }
            }
        )
        
        # Extract and format the retrieved results
        retrieved_results = []
        if 'retrievalResults' in response:
            for result in response['retrievalResults']:
                retrieved_result = {
                    'content': result['content'],
                    'score': result['score'],
                    'location': result.get('location', {}),
                    'metadata': result.get('metadata', {})
                }
                retrieved_results.append(retrieved_result)
                
        return retrieved_results
        
    except Exception as e:
        print(f"Error retrieving from knowledge base: {str(e)}")
        return []

def ask_bedrock_llm_with_knowledge_base(query: str, model_arn: str, kb_id: str) -> str:
    response = bedrock_agent_runtime_client.retrieve_and_generate(
        input={
            'text': query
        },
    retrieveAndGenerateConfiguration={
        'type': 'KNOWLEDGE_BASE',
        'knowledgeBaseConfiguration': {
            'knowledgeBaseId': kb_id,
            'modelArn': model_arn,
            'retrievalConfiguration': {
                'vectorSearchConfiguration': {
                  #  'filter': {
                       # 'equals': {
                     #       'key': 'Marque',
                      #      'value': 'Samsung'
                 #       }
                #    }
                }
            }
        }
    }
)

    return response

#invoke bedrock agents
def invoke_bedrock_agent(query: str, agent_id: str, agent_alias_id: str) -> str:
    response = bedrock_agent_runtime_client.invoke_agent(
        agentId=agent_id,
        agentAliasId=agent_alias_id,
        sessionId='XXXXXXXX',
        inputText=query
    )
    return response
query = "liste les appareils?"

for model_id in claude_model_ids:
    model_arn = f'us.anthropic.claude-3-5-sonnet-20241022-v2:0'
    response = ask_bedrock_llm_with_knowledge_base(query, model_arn, kb_id)
    generated_text = response['output']['text']
    citations = response["citations"]
    contexts = []
    for citation in citations:
        retrievedReferences = citation["retrievedReferences"]
        for reference in retrievedReferences:
            contexts.append(reference["content"]["text"])
    #print(f"---------- Generated using {model_id[0]}:")
    #print(generated_text )
   # print(f'---------- The citations for the response generated by {model_id[0]}:')
  #  print(contexts)
    print()
    retrieved_results=retrieve_from_knowledge_base(query,kb_id)
    print(retrieved_results)
    #invoke_bedrock_agent(query, "DJCWVLUALB", "gengis")
    #print(response)
